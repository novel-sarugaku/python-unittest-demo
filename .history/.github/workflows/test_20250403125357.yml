# GitHub Actions の追加（＝自動テストの設定）
# ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
# GitHubにコードをアップロード（push）したときやプルリクエスト（pull_request）を作ったときに、
# 自動でPythonのテストを実行するための設定
# ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
# このファイルは、GitHubにコードを送るたびに：
# Ubuntuで仮想PCを作って
# Pythonをインストールして
# 必要なライブラリを入れて
# tests フォルダの中のテストコードを自動で実行してくれる
# ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

# このGitHub Actionsの名前。「Pythonのテストをするよ」という意味
name: Python UnitTest

# いつこのアクションを動かすかを指定
# push：GitHubにコードをアップしたとき
# pull_request：他の人に「コード見て」と依頼（＝プルリク）したとき
on: [push, pull_request]

# "test" という名前の仕事（job）を作成
# どこで動かす？ → 「ubuntuというOSの環境でやってね」という意味
# ※GitHub Actionsでは「Ubuntuのパソコンを自動で用意して、そこでテストを動かしてる。
jobs:
  test:
    runs-on: ubuntu-latest

    # ステップ1：コードをGitHubから持ってくる
    # checkoutは「コードをチェックアウト（取り出す）」するための命令
    steps:
    - uses: actions/checkout@v3

    # ステップ2：Pythonの準備をする
    # Pythonのバージョンは 3.10 を使うよという意味
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # ステップ3：必要な道具をインストール
    # pip install --upgrade pip はpipを最新版にする命令
    # pip install -r requirements.txt は「requirements.txt」というファイルに書かれているツールを全部インストール
    # || true は「もし失敗してもスルーしてね」という意味
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || true

    # ステップ4：テストを実行する
    # python -m unittest はPythonに元から入っている「テストの機能」
    # discover は「テストを探して実行してね」という命令
    # -s tests は「testsというフォルダの中を探してね」という意味
    - name: Run tests
      run: |
        python -m unittest discover -s tests